{
    "": { "title": "Peercoin | The Pioneer of Proof-of-Stake" },
    "/overview": {
        "title": "Introduction to Peercoin",
        "text": "import { Divider } from '../app/components';\n\n<!-- KEYWORDS: Overview of Peercoin Documentation  -->\n\n# Introduction to Peercoin\n\nHello, and welcome to the Peercoin Documentation website. We hope to help you understand more about Peercoin, its philosophy, and the technology that defines it. Before getting too technical, we invite you to dive a little bit into the history of Peercoin, learning why it was created, and the purposes behind it.\n\nThe key innovation of Peercoin is the invention of Proof-of-Stake, a blockchain consensus protocol that provides efficient, sustainable security and user governance, allowing for a decentralized cryptocurrency network with a sane economic model and a core focus on security and sustainability.\n<Divider/>\n\n## Peercoin Genesis: 2012\n\nSince the creation of Bitcoin (Nakamoto 2008), Proof-of-Work has been the dominant design for security and distribution of peer-to-peer cryptocurrencies.  In 2012, Sunny King and Scott Nadal proposed an alternative form of consensus that remedied the energy inefficiencies of Bitcoin as well as improving the long-term decentralization of the system.   Proof-of-Work mining trends toward centralization due to the increased profits and production from large scale mining operations.  Proof-of-Stake, on the other hand, provides sustainable decentralization by allowing for a consensus protocol that can be run from a home computer without specialized hardware or massive energy use.  Instead of electricity and computing power, time and value invested in the system (coin age) is consumed to verify transactions, resolving many of the issues plaguing Proof-of-Work consensus.  To bootstrap the coin distribution, the intrinsic competition of Proof-of-Work is used alongside the security model of Proof-of-Stake to provide a fair and balanced system with no premine or initial coin offering. Proof-of-Stake safeguards the blockchain while a dynamic Proof-of-Work reward continues Peercoin's fair distribution model, resulting in an estimated 1-3% inflation each year for a practical long-term sustainable economic model.\n\nSince its first block in 2012, Peercoin has remained one of the most energy efficient, secure, and size effective blockchains in existence. Many projects have picked up the torch of using Proof-of-Stake or its derivatives, and all can be traced back to Peercoin's original model. The efficient security of Peercoin naturally acts as a backbone layer, simplifying the deployment of future scaling solutions."
    },
    "/comparison/consensus": {
        "title": "Consensus",
        "text": "<!-- KEYWORDS: consensus, distribution, proof-of-stake, proof-of-work  -->\n# Consensus algorithm\n\nPeercoin is secured by Proof-of-Stake consensus. Proof-of-Work uses computational power as a scarce resource as a means of selecting the producer of a block, while Proof-of-Stake uses time continuously invested in the system measured in \"coin age\". Once an output to a transaction has reached an age of 30 days, the coins at this output become mature and are eligible for participation in the consensus process. Mature outputs are used as proof of having a stake in the system and are presented as evidence through the \"coinstake\" transaction of a new block. Each second of the timestamp is used as the nonce in the block hashing function to try to achieve the target difficulty. In conjunction with the number of coins, the probability of minting is proportional to the number of days since the 30 day mark with a maximum of 90 days, at which point the output has reached maximum maturity. Upon minting, the output will gain a block reward that is linearly related to the coinage, and the stake used to mint will be locked for 520 blocks (about 3 days). Minting can be done on almost any computer with the standard client installed, including compact computers like raspberry pi's, making the process objectively energy efficient when compared with computational hash-based proof algorithms. Simply put, Peercoin evens out the race between high and low power computers by limiting the number of hashes you can perform to 1 per second.\n\nThe Proof-of-Stake mechanism requires attackers to be monetarily invested in the system. They must undergo a good bit of opportunity cost as well as risking a large amount of stake in order to manipulate the consensus maliciously. In Proof-of-Work, any coordinated collection of powerful computers is a threat to the system. In Proof-of-Stake, any would-be attacker is conflicting with their own interests by attacking a system they are invested in. Beyond this base-level trust mechanism, giving the holders of the coins direct say over the protocol used to secure their stake generates more direct engagement between the the code and its users. The self-sufficiency of Peercoin is the ability to govern itself through an efficient consensus model that consolidates power in the hands of the users."
    },
    "/comparison/distribution": {
        "title": "Distribution",
        "text": "<!-- KEYWORDS: comparison, consensus, distribution, proof-of-stake, proof-of-work, limit, size, reward  -->\n# Distribution and Block Rewards\n\nPeercoin is created through the process of creating blocks, both PoW and PoS, and has no true upper limit on supply (the 'MAX_MONEY' variable in the code is only used as a precaution). PoW block rewards are used to create a fair initial distribution of coins in the network. The algorithm for PoW rewards is logarithmically decaying as the difficulty and computational power of the network increases. The trending development of SHA256 ASIC miners as the industry standard allows for efficient distribution that naturally eclipses as cryptocurrency gains widespread adoption.\n\nProof-of-Work reward formula is: `block_subsidy = 9999 / difficulty ^ (1/4)`\n\nProof-of-Work coin mint rate is a function of difficulty, for every 16x in difficulty mint rate is halved.\n\nPoS rewards are given to those securing the network against attackers and are determined by a linear function with two components. The first dynamic portion results in 3% of the coins used to mint annually. The second static portion results in an additional 0.25% inflation of the coin supply distributed evenly amongst the blocks expected in a year, which approximately equals 1.25 ppc but scales with the size of the supply.\n\nProof-of-Stake reward formula is:\nProof-of-Stake coin mint rate is ~3-5% interest per year\n\nAt current network parameters, the inflation due to PoS is ~0.95%, while the inflation due to PoW is ~1.45%.  The total current annual inflation rate of ~2.4% is within the 1-3% window that is generally considered healthy for a currency or a broadly used unit of account."
    },
    "/comparison/fees": {
        "title": "Fees",
        "text": "<!-- KEYWORDS: fees, burn, burned, fixed -->\n# Burned and Fixed Fees\nPeercoin's fees are fixed at 0.01 PPC per kB and are naturally burned with each transaction. The ease of provably burning coins is in contrast to many Proof-of-Work coins that recycle their transaction fees to miners in order to prepare for deflationary economies. Recycling fees back to block producers results in a 'fee market' that is inefficient and burdensome to the user experience. Peercon's economics allow for decentralized burning of a fixed fee when using the common resource of the Peercoin blockchain. As a result, block size limitations that plague other cryptocurrencies are not relevant to Peercoin. While the block size in Peercoin is set at 1 MB to protect against attacks, the community has been clear that higher blocksizes would be welcomed if the enhanced throughput were needed. As of writing, the Peercoin blockchain is very small (~1GB) and the fees are very low (~$0.005/txn), due in large part to the burned fixed-fee approach.\n\nPeercoin block producers are motivated to include transactions in a block because the reduction in supply from burning fees increases the relative value of their stake. Proof-of-Work has inherent issues with this concept because every bit of computation resource is needed to find a block, so addition of transactions must be motivated by recycled fees. In Proof-of-Stake, the computation required in order to mint is minimal such that including transactions comes at practically no cost to the block producer.\n"
    },
    "/comparison/blocksizeandtiming": { "title": "Block size and time spacing" },
    "/wallets/core": {
        "title": "Offical Client (Core)",
        "text": "<!-- KEYWORDS: core wallet, core, peercoind, peercoin-qt, peercoin-cli -->\n# Wallets\n\n## Official client implementation\n\nOnce you install official Peercoin client from peercoin.net, youâ€™ll have access to three executables: peercoind, peercoin-qt, and peercoin-cli.\n\n### Peercoin Wallet\n\n`peercoin-qt` provides a combination full Peercoin network client and wallet. Peercoin-qt is highly portable application written in QT5 framework.\nFrom the Help menu, you can access a console where you can enter the RPC commands so power-user features are still available.\n\n### peercoind\n\n`peercoind` provides a full peer which you can interact with through JSON-RPC interface on port 9902 (9904 for testnet).\n\n### peercoin-cli\n\n`peercoin-cli` allows you to send JSON-RPC commands to running instance of `peercoind` from the command line.\nFor example:\n> peercoin-cli help\n\n> peercoin-cli getinfo\n\nAll three programs get settings from peercoin.conf in the Peercoin application directory:\n\n> Windows: %APPDATA%\\Peercoin\\\n\n> OSX: $HOME/Library/Application Support/PPCoin/\n\n>Linux: $HOME/.peercoin/\n\nTo use `peercoind` and `peercoin-cli`, you will need to add a RPC password to your peercoin.conf file. Both programs will read from the same file if both run on the same system as the same user, so any long random password will work:\n\n> rpcpassword=change_this_to_a_long_random_password\n\nYou should also make the peercoin.conf file only readable to its owner.\nOn Linux, Mac OSX, and other Unix-like systems, this can be accomplished by running the following command in the Peercoin application directory:\n\n> chmod 0600 peercoin.conf\n\n## Peercoin Core Wallet\n\n### Windows Installation\n\nTo install on Windows, you can find the download files here: https://www.peercoin.net/wallet.html.  Once download is complete, extract the contents of the folder.  Depending on if your system is x32 or x64 bits, choosing the relevant folder.  Run the peercoin-win_setup.exe and you will be guided through the installation process.  Once finishes, the client can be launched by running \"peercoin-qt.exe\" from the appropriate folder.\n\n### Mac Installation\n\nTo install for MacOS, you can find the download files here: https://www-peercoin.net/wallet.html.  Once the download is complete, extract the contents of the folder.  Inside the extracted folder, double click the \"Peercoin-Qt.dmg\" file to open the client.\n\n### Debian Installation\n\nAs of April 2018, Peercoin has official Debian repository hosted at https://peercoin.github.io/deb-repo/.\nRepository is serving .deb packages for latest Debian stable, for amd64, arm64 and armhf hardware architectures.\n\n#### Adding the GPG key\n\n`wget -O - https://peercoin.github.io/deb-repo/peercoin.apt.key | sudo apt-key add -`\n\n#### Adding the repository in the sources\n\n`sudo sh -c \"echo 'deb https://peercoin.github.io/deb-repo/ buster main' >> /etc/apt/sources.list.d/peercoin.list\"`\n\n`sudo apt update`\n\n#### Installing the packages\n\n`sudo apt install peercoin-qt`\n\n____________\n\n## General Notes\n\n### Wallet Encryption\n\nWhen a wallet is first generated, it will be unencrypted.  In order to encryt the wallet, one must go to Settings > Encrypt Wallet.  The client will then prompt the user for a password which will then be used to verify transactions and unlock the wallet for minting in the future.  It is important to make sure this password is remembered as losing access means losing access to any coins held in that wallet.  A wallet must be encrypted in order to participate in minting.\n\n### Backups\n\nIt is strongly recommended that a backup of the wallet.dat is made and kept in a separate location in the event of hardware failure or similar disaster.  Choosing File > Backup Wallet, will present the user with the option of where to export this file.\n\n____________\n\n## Wallet Overview\n\nFrom this tab you can see the \"Available\", \"Pending\", and \"Total\" balance of your Peercoin wallet.  On the right side, you can see your \"Recent transactions\" as well which will show the most recent transactions that have come into the wallet recently.\n\n### Send\n\nThe send tab is used to send Peercoin.  The \"Pay To\" section is where a target address can be entered.  If you wish to label the address for future use, such as an exchange, you may add it to your address book.  Amount determines the quantity of Peercoin which will be sent in the transaction.  If the wallet is encrypted, the secure password must be entered before the send transaction can be finalized.\n\n### Receive\n\nThe Receive tab lists all wallet addresses attached to the Peercoin client.  Generating a new address is as simple as clicking the \"New Address\" button at the bottom of the screen.  The \"Sign Message\" button can also be used to verify ownership of a wallet.  [There is a tutorial on signing messages with the Peercoin client here. The example addresses have been removed from the image for privacy sake.\n\n### Transactions\n\nThe Transactions tab gives a full history of recent transactions that have come in and out of the wallet since its creation.  It will list the Date, Type, Address, and Amount.  This information can be exported as a .csv using the \"Export\" button on the bottom right of the screen.  The amounts have been removed from the image for privacy sake.\n\n### Minting\n\nThe Minting tab is the fifth option and from here, you can see the coin age of your transaction.  The Address, Age, Balance, CoinDay, and MintProbability, are also displayed.  Until the transaction reaches 30 days of age, it will be displayed in red, with a CoinDay of 0.  In the picture above, you can see a transaction that is red and is not eligible for staking due to it only having a an Age of 49.  In the next 30 days, it has a probability of minting of roughly 54.94%.  In 4 days, that transaction will become eligible for minting and change to green color.  You can use the \"Display minting probability within:\" drop-down menu to estimate the probability of minting during the next period.  Once the 30 day period has passed, and the transaction has become eligible for minting, go to Settings > Decrypt Wallet for Minting Only, and enter your wallet password.  If you have not already encrypted your wallet, you will be asked to do so.  Once the wallet has been unlocked for minting, leaving it running will allow for minting to occur.  Making a transaction from that wallet will disrupt the coin age and the maturation process will have to be repeated.  Sending more coins will not disrupt the coin age.\n\nIf you are interested in calculating the rough time until minting takes place, you can use this calculator: http://poscalculator.peercointalk.org/\n\nOnce minting occurs, the initial batch of coins will have their coin age reset, and the coins earned from minting will remain locked for 520 blocks, or roughly 3 days.  After this period, the coins will be available in the wallet.  As a note, you do not need to leave your wallet running 24/7, as the time spent staking does not increase the probability of minting taking place, as the highest coin age will always take precedence.  Holding longer also does not increase the minting reward.\n\n### Addresses\n\nAddresses is the final tab and displays the addresses saved to the Address Book from the Send tab.  This is handy for managing repeat use addresses such as exchanges.  The example address has been removed from the image for privacy sake.\n\n____________\n\n## Creating a New Address\n\nCreating a new address is very simple.  Navigate to the \"Receive\" tab and select the \"New Address\" button.  A window with a \"Label\" and \"Address\" field will appear.  Enter the name you want in the \"Label\" field.  You will be able to change this later.  Leave the \"Address\" field blank.  Click \"Ok\" to continue.  If you have already encrypted your wallet, you will need to enter your wallet password.\n\nYou can see the new address now available.  If you want to change the name of the label of the address, double click the name and you will be able to enter a new one.\n\n_________________________________________\n\n## Sending Peercoin\n\nIf you want to send Peercoin, navigate to the \"Send\" tab.  We are going to send some Peercoins to the address we created above.  This page has three fields: \"Pay To\", \"Label\", and \"Amount\".  Paste the address you want to send Peercoins to into the \"Pay To\" field.  Make sure to verify that this address is correct.  If you already have a label for this wallet, it will automatically fill in the \"Label\" field.  If not, you can write your own in and it will be saved in your address book (Under the \"Address\" tab).  In the amount field, insert the number of Peercoins you would like to send.  There is a drop down menu which allows you to determine if you want to send in denominations of \"Peercoins\", \"MilliPeercoins\", \"MicroPeercoins\".  Make sure that you have enough to pay for the transaction fee.  When everything is finalized, press the \"Send\" button to confirm the transaction.  You will be prompted to confirm the transaction and must enter your wallet password to verify the transaction.  Once this is completed, you can view the transaction under the \"Transactions\" tab.\n"
    },
    "/wallets/multisig": { "title": "Using Multisig" },
    "/wallets/hardware-wallets": { "title": "Hardware Wallets" },
    "/wallets/paperwallet": {
        "title": "Paperwallets",
        "text": "<!-- KEYWORDS: paper, paper wallet, wallet, guide -->\n# Peercoin Paper Wallet Guide\n\nYou can find the source code for this wallet here: https://github.com/peercoin/peercoin-address-generator/\n\nIf you are interested in generating a paper wallet for holding your Peercoin, this guide will walk you through the process.  First, navigate to this address: https://paperwallet.peercoin.net/\n\n![Paper Wallet Home Screen](../img/paperwallet_mainscreen.JPG)\n\nTo being, click the large green Start button.  This will begin the wallet generation process.  In order to ensure randomness, you will be asked to move your mouse cursor around for a period until a wallet address is generated.  This movement of the mouse adds entropy to the generation of an truly random address\n\n![Swipe finger for randomness](../img/paperwallet_random.JPG)\n\n![Keep Swiping](../img/paperwallet_keepswiping.JPG)\n\nOnce you have moved the mouse enough, the wallet will be generated and you will be presented with the public and private key for the new wallet.\n\n![Finished!](../img/paperwallet_finished.JPG)\n\nTo export the wallet, click the green share icon on the left side of the QR code.  You will then be presented with the options displayed below.\n\n![Saving Options](../img/paperwallet_savingoptions.JPG)\n\n*Save .txt locally\n   *This option will download the wallet as a text file.*\n*Copy address/priv. key to clipboard\n   *This option will copy the address/priv. key to a clipboard where it can be pasted.  Make sure your system is clean and secure before exposing this information to potential threats like keystroke loggers.*\n*Send via email\n   *This option will allow you to send the wallet information via email.*\n*Save JSON data will\n   *This option will download the wallet information in JSON format.*\n*Paper Wallet (print)\n   *This option will open a print dialogue from which the wallet can be printed or saved as a PDF.  Paper wallets provide physical security and backups for Peercoins that are to be left in cold storage.*\n\nThis concludes the tutorial on the paper wallet generator.  This platform provides extra security for those who wish to keep their Peercoin in a safe and physical location."
    },
    "/wallets/bootstrapping": {
        "title": "Bootstrapping",
        "text": "<!-- KEYWORDS: bootstrap, wallet, bootstrapping -->\n# Bootstrapping\n\n## What is it?\n\n> In computer technology the term (usually shortened to booting) usually\n> refers to the process of loading the basic software into the memory of\n> a computer after power-on or general reset, especially the operating\n> system which will then take care of loading other software as needed.<sup>[9.1](#footnote-9.1)</sup>\n\nFor Peercoin it means loading all of the block chain history from a special\nfile containing a snapshot of block data.\n\nThis special file, named `bootstrap.dat`, allows the Peercoin client to\nsync from your hard drive instead of the internet. Using a\n`bootstrap.dat` file is faster and reduces stress on the Peercoin network to sync new nodes.\n\n## How do I make a `bootstrap.dat`?\n\nAny synced client has the ability to make a `bootstrap.dat` file. Assuming\nyou're running linux you can do the following to manufacture your own.\nFirst, shutdown your client. Allow it to cleanly exit so we know the block\ndata is settled.\n\nNow, navigate to the directory `~/.peercoin/blocks` in your terminal and\nnotice the files named `blk00000.dat`, `blk00001.dat`, `blk00002.dat`, etc.\nThese are the raw block data files that can be combined to form the\n`bootstrap.dat`!\n\nThe command:\n> cat blk*.dat > bootstrap.dat\n\nwill produce the `bootstrap.dat`.\nThe file is often then compressed (zip'ed, tar/gzip'ed) and shared.\n\nThe same process can be executed on Microsoft Windows (7+):\n\n> CD C:\\Users\\<my_user>\\AppData\\Roaming\\Peercoin\n\n> COPY /b blk0001.dat+blk0002.dat bootstrap.dat\n\nOr on OS X:\n\n> cd \"~/Library/Application Support/Peercoin/\"\n\n> cat blk*.dat > bootstrap.dat\n\n\nOn linux and OS X you can create hash of the bootstrap:\n\n> sha256 bootstrap.dat\n\n## How do I use a `bootstrap.dat`?\n\nAssuming you're on linux and you haven't started the Peercoin client before.\n\nMake the directory `~/.peercoin` if it doesn't exist and then move the\n`bootstrap.dat` into the `~/.peercoin` directory.\n\nStart the Peercoin client. You should see the status `Importing blocks from disk...` if the client has found the `bootstrap.dat` and is using it to\nsync the block chain.\n\n## Footnotes\n\n<a id=\"footnote-9.1\">9.1</a>: https://en.wikipedia.org/wiki/Bootstrapping\n"
    },
    "/peerassets": { "title": "PeerAssets" },
    "/proof-of-stake": { "title": "Proof-of-Stake" },
    "/mining": { "title": "Mining" },
    "/developers/compiling": {
        "title": "Compiling",
        "text": "<!-- KEYWORDS: compile, build, compiling -->\n# Compiling\n\n### Compiling packages for Debian and Ubuntu\n\nAs Peercoin is made to run on range of platforms, from Amazon's server to low powered Raspberry Pi Debian is perfect OS platform for deploying Peercoin nodes as it is renowned for multitude of supported hardware architectures as well as security and stability.\n\nFor compilation of Debian packages we will be using `pbuilder` which is a automatic Debian Package Building system for personal development workstation environments.<sup>[3.1](#footnote-3.1)</sup> pbuilder aims to be an easy-to-setup system for auto-building Debian packages inside a clean-room environment, so that it is possible to verify that a package can be built on most Debian installations. The clean-room environment is achieved through the use of a base chroot image, so that only minimal packages will be installed inside the chroot.\n\nThe following tutorial is written for the Ubuntu or Debian host, precisely Ubuntu 17.10 which is last stable version of Ubuntu at the time of writing.\n\n### Prepare the tooling\n\n`sudo apt install pbuilder qemu-user-static ubuntu-keyring debian-archive-keyring`\n\nWe'll also need keyring for the Raspbian, which a Debian fork made for the Raspberry Pi platform, so we can compile packages for this ARM based mini-pc platform.\n\n> wget http://archive.raspbian.org/raspbian/pool/main/r/raspbian-archive-keyring/raspbian-archive-keyring_20120528.2_all.deb\n\n> sudo dpkg -i raspbian-archive-keyring_20120528.2_all.deb\n\nNow, set up the conf file for the pbuilder.\n\n`touch .pbuilderrc`\n\n> gedit .pbuilderrc\n\nPaste the following:\n\n```\n#!/bin/sh\n\nset -e\n\nPBUILDERSATISFYDEPENDSCMD=\"/usr/lib/pbuilder/pbuilder-satisfydepends-apt\"\n\nif [ \"$OS\" == \"debian\" ]; then\n    MIRRORSITE=\"http://ftp.no.debian.org/debian/\"\n    COMPONENTS=\"main contrib non-free\"\n    DEBOOTSTRAPOPTS=(\"${DEBOOTSTRAPOPTS[@]}\"\n        \"--keyring=/usr/share/keyrings/debian-archive-keyring.gpg\")\n    : ${DIST:=\"wheezy\"}\n    : ${ARCH:=\"amd64\"}\n    if [ \"$DIST\" == \"wheezy\" ]; then\n        #EXTRAPACKAGES=\"$EXTRAPACKAGES debian-backports-keyring\"\n        OTHERMIRROR=\"$OTHERMIRROR | deb $MIRRORSITE wheezy-backports $COMPONENTS\"\n    fi\nelif [ \"$OS\" == \"raspbian\" ]; then\n    MIRRORSITE=\"http://ftp.acc.umu.se/mirror/raspbian/raspbian/\"\n    COMPONENTS=\"main contrib non-free\"\n    DEBOOTSTRAPOPTS=(\"${DEBOOTSTRAPOPTS[@]}\"\n        \"--keyring=/usr/share/keyrings/raspbian-archive-keyring.gpg\")\n    : ${DIST:=\"wheezy\"}\n    : ${ARCH:=\"armhf\"}\nelif [ \"$OS\" == \"ubuntu\" ]; then\n    MIRRORSITE=\"http://no.archive.ubuntu.com/ubuntu/\"\n    COMPONENTS=\"main restricted universe multiverse\"\n    DEBOOTSTRAPOPTS=(\"${DEBOOTSTRAPOPTS[@]}\"\n        \"--keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg\")\nelse\n    echo \"Unknown OS: $OS\"\n    exit 1\nfi\n\nif [ \"$DIST\" == \"\" ]; then\n    echo \"DIST is not set\"\n    exit 1\nfi\n\nif [ \"$ARCH\" == \"\" ]; then\n    echo \"ARCH is not set\"\n    exit 1\nfi\n\nNAME=\"$OS-$DIST-$ARCH\"\n\nif [ \"$ARCH\" == \"armel\" ] && [ \"$(dpkg --print-architecture)\" != \"armel\" ]; then\n    DEBOOTSTRAP=\"qemu-debootstrap\"\nfi\nif [ \"$ARCH\" == \"armhf\" ] && [ \"$(dpkg --print-architecture)\" != \"armhf\" ]; then\n    DEBOOTSTRAP=\"qemu-debootstrap\"\nfi\n\nDEBOOTSTRAPOPTS=(\"${DEBOOTSTRAPOPTS[@]}\" \"--arch=$ARCH\")\nBASETGZ=\"/var/cache/pbuilder/$NAME-base.tgz\"\nDISTRIBUTION=\"$DIST\"\nBUILDRESULT=\"$HOME/pbuild-results/\"\nAPTCACHE=\"/var/cache/pbuilder/$NAME/aptcache/\"\nBUILDPLACE=\"/var/cache/pbuilder/build\"\nHOOKDIR=\"/var/cache/pbuilder/hook.d/\"\n```\n\nMake the directory where pbuilder will place the packages:\n\n`mkdir -p $HOME/pbuild-results`\n\n### Bootstrap the chroots\n\nRaspbian (buster):\n\n> sudo OS=raspbian DIST=buster ARCH=armhf pbuilder --create\n\nDebian stable:\n\n> sudo OS=debian DIST=buster ARCH=amd64 pbuilder --create\n\n### Preparing for build\n\n(compiling for Raspbian stretch in this example)\n\nDownload the latest .tar.gz from github.com/peercoin.\n\n> wget https://github.com/peercoin/peercoin/releases/download/v0.11.0ppc/peercoin-0.11.0.tar.gz\n\nDebian build system is very strict about names, so we need to rename this to:\n\n`peercoin_0.11.0.orig.tar.gz`\n\nExtract the contests of the file using `tar xf` and `cd` to it.\n\nCopy the debian directory from the contrib to this directory:\n\n`cp -r contrib/debian .`\n\n#### Some modifications\n\n(this is just an extra step required for the Raspbian, to fix problem with autotools)\n\n`sed '/./configure --with-gui=qt5 --with-incompatible-bdb/s/$/ --with-boost-libdir=/usr/lib/arm-linux-gnueabihf/' debian/rules`\n\n### Building the package\n\n`OS=raspbian DIST=stretch ARCH=armhf pdebuild`\n\nAnd wait, it will take a while so go get a coffee or something. It's compiling by emulating ARM cpu in QEMU.\n\nThe concept of pbuild and cross-platform compilations is that you pass it this environment variables like \"OS\" and \"DIST\".\n\nFor example OS=debian and DIST=wheezy will use Debian Wheezy chroot, you can also pick architecture by using ARCH= environment variable.\n\n### Footnotes\n<a id=\"footnote-3.1\">3.1</a>: https://jodal.no/2015/03/08/building-arm-debs-with-pbuilder/\n"
    },
    "/developers/json-rpc-reference": { "title": "JSON-RPC API reference" },
    "/developers/developer-notes": { "title": "Developer Notes" },
    "/developers/bitcore-example": { "title": "Bitcore Example" },
    "/faq": { "title": "Frequently Asked Questions" },
    "/changelog": { "title": "Protocol Versions (Changelog)" },
    "/legal": { "title": "Legal Notice" },
    "/press": { "title": "Press Mentions" }
}
